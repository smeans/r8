#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app/app.js');
const debug = require('debug')('r8:server');
const http = require('http');
const ws = require('ws');

const { wsMap } = require('../app/node_modules/notify.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Create websocket server.
 */
const socketServer = new ws.WebSocket.Server({
    clientTracking: false,
    noServer: true
});

server.on('upgrade', function (request, socket, head) {
  app.locals.sessionParser(request, {}, () => {
    if (!request.session.loginSessionId) {
      socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
      socket.destroy();

      return;
    }

    console.debug('socketServer: creating socket for session',
            request.session.loginSessionId);

    socketServer.handleUpgrade(request, socket, head, function (ws) {
      socketServer.emit('connection', ws, request);
    });
  });
});

socketServer.on('connection', function (clientSocket, request) {
  const loginSessionId = request.session.loginSessionId;

  wsMap.set(loginSessionId, clientSocket);

  clientSocket.on('message', function (message) {
    console.log(`Received message ${message} from session ${loginSessionId}`);
  });

  clientSocket.on('close', function () {
    wsMap.delete(loginSessionId);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
